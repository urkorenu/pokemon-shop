name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev*

  pull_request:
    branches:
      - main
      - dev*

jobs:
  lint:
    name: Lint and Format Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.12

      - name: Install Dependencies
        run: |
          pip install flake8 black

      - name: Run Black (Apply Formatting)
        run: |
          black .

      - name: Run Flake8 (Linting)
        run: |
          flake8 --exit-zero .

      - name: Commit and Push Changes
        if: success() && github.event_name == 'pull_request'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Define the branch name
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
      
          # Stash any unstaged changes to ensure a clean rebase
          git stash --include-untracked
      
          # Fetch and rebase the branch
          git fetch origin $BRANCH_NAME
          git rebase origin/$BRANCH_NAME
      
          # Reapply the stashed changes
          git stash pop || echo "No stashed changes to apply"
      
          # Add and commit changes
          git add .
          git commit -m "Apply black formatting via GitHub Actions" || echo "No changes to commit"
          
          # Push changes
          git push --force-with-lease origin HEAD:$BRANCH_NAME


  test:
      name: Run Tests on Dynamic EC2 Agent
      runs-on: ubuntu-latest
      steps:
        - name: Checkout Code
          uses: actions/checkout@v3

        - name: Set up AWS CLI
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: eu-north-1

        - name: Generate User Data Script
          run: |
            cat <<EOF > ec2-user-data.sh
            #!/bin/bash
            exec > >(tee /var/log/user-data.log|logger -t user-data) 2>&1
            yum update -y
            yum install -y git docker

            systemctl start docker
            systemctl enable docker

            DOCKER_COMPOSE_VERSION=2.22.0
            curl -L "https://github.com/docker/compose/releases/download/v$DOCKER_COMPOSE_VERSION/docker-compose-\$(uname -s)-\$(uname -m)" -o /usr/local/bin/docker-compose
            chmod +x /usr/local/bin/docker-compose

            export DB_USERNAME=${{ secrets.DB_USERNAME }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_NAME=${{ secrets.DB_NAME }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            export S3_BUCKET=${{ secrets.S3_BUCKET }}
            export API_KEY=${{ secrets.API_KEY }}

            echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> /etc/environment
            echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> /etc/environment
            echo "DB_HOST=${{ secrets.DB_HOST }}" >> /etc/environment
            echo "DB_NAME=${{ secrets.DB_NAME }}" >> /etc/environment
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> /etc/environment
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> /etc/environment
            echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> /etc/environment
            echo "S3_BUCKET=${{ secrets.S3_BUCKET }}" >> /etc/environment
            echo "API_KEY=${{ secrets.API_KEY }}" >> /etc/environment

            touch /home/ec2-user/setup.log
            EOF

        - name: Launch EC2 Instance
          id: launch-ec2
          run: |
            AMI_ID=$(aws ec2 describe-images \
            --owners amazon \
            --filters "Name=name,Values=amzn2-ami-hvm-2.*-x86_64-gp2" \
            --query "Images[0].ImageId" \
            --output text)
            
            INSTANCE_ID=$(aws ec2 run-instances \
              --image-id ${AMI_ID} \
              --instance-type t3.micro \
              --key-name kafka \
              --security-group-ids sg-0010efc35354a2f24 \
              --subnet-id subnet-01b84be40c8c42cfc \
              --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Test-Agent}]' \
              --user-data file://ec2-user-data.sh \
              --query 'Instances[0].InstanceId' \
              --output text)
            echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
            echo "EC2 instance launched: $INSTANCE_ID"

        - name: Wait for Instance to be Running
          run: |
            aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}
            echo "EC2 instance is running."

        - name: Get Public IP Address
          run: |
            PUBLIC_IP=$(aws ec2 describe-instances \
              --instance-ids ${{ env.INSTANCE_ID }} \
              --query 'Reservations[0].Instances[0].PublicIpAddress' \
              --output text)
            echo "PUBLIC_IP=${PUBLIC_IP}" >> $GITHUB_ENV
            echo "EC2 instance public IP: $PUBLIC_IP"

        - name: Wait for User Data Script Completion
          run: sleep 60

        - name: Run Tests on EC2
          uses: appleboy/ssh-action@v0.1.10
          with:
            host: ${{ env.PUBLIC_IP }}
            username: ec2-user
            key: ${{ secrets.EC2_PRIVATE_KEY }}
            script: |
              cd /home/ec2-user/
              if [ ! -f setup.log ]; then
                echo "User data script did not complete yet"
                sleep 30
              fi
              if [ ! -f setup.log ]; then
                echo "User data script did not complete"
                exit 1
              fi
              
              git clone --branch dev https://github.com/urkorenu/pokemon-shop.git
              cd pokemon-shop
              docker-compose up --build test


        - name: Terminate EC2 Instance
          if: always()
          run: |
            aws ec2 terminate-instances --instance-ids ${{ env.INSTANCE_ID }}
            aws ec2 wait instance-terminated --instance-ids ${{ env.INSTANCE_ID }}
            echo "EC2 instance terminated."



  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        env:
          COMMIT_HASH: ${{ github.sha }}
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/pokemon-shop"

          if [ "$BRANCH_NAME" == "main" ]; then
            TAG="latest"
          else
            TAG="dev"
          fi

          docker build -t $IMAGE_NAME:$COMMIT_HASH .
          docker tag $IMAGE_NAME:$COMMIT_HASH $IMAGE_NAME:$TAG

          docker push $IMAGE_NAME:$COMMIT_HASH
          docker push $IMAGE_NAME:$TAG

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/pokemon-shop:latest"
            docker pull $IMAGE_NAME
            docker stop pokemon-shop || true
            docker rm pokemon-shop || true
            docker run -d -p 5000:5000 --name pokemon-shop $IMAGE_NAME

