name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev*
  pull_request:
    branches:
      - main
      - dev*

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3
      # Set up Python environment
      - uses: actions/setup-python@v4
        with:
          python-version: 3.10.12
      # Install linting tools
      - run: pip install flake8 black
      # Run Black code formatter
      - run: black .
      # Run Flake8 linter
      - run: flake8 --exit-zero .
      # If successful and it's a pull request, apply Black formatting and push changes
      - if: success() && github.event_name == 'pull_request'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          git stash --include-untracked
          git fetch origin $BRANCH_NAME
          git rebase origin/$BRANCH_NAME
          git stash pop || echo "No stashed changes to apply"
          git add .
          git commit -m "Apply black formatting via GitHub Actions" || echo "No changes to commit"
          git push --force-with-lease origin HEAD:$BRANCH_NAME

  test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3
      
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose


      # Run the tests locally
      - name: Run Docker Compose
        run: |
          docker compose up test -d 

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3
      # Log in to Docker Hub
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # Build and push Docker images
      - env:
          COMMIT_HASH: ${{ github.sha }}
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/pokemon-shop"
          TAG=$([ "$BRANCH_NAME" == "main" ] && echo "latest" || echo "dev")
          docker build -t $IMAGE_NAME:$COMMIT_HASH .
          docker tag $IMAGE_NAME:$COMMIT_HASH $IMAGE_NAME:$TAG
          docker push $IMAGE_NAME:$COMMIT_HASH
          docker push $IMAGE_NAME:$TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      # Configure AWS credentials
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-north-1
      # Deploy the application using AWS SSM
      - run: |
          aws ssm send-command \
            --instance-ids ${{ secrets.EC2_INSTANCE_ID }} \
            --document-name "AWS-RunShellScript" \
            --comment "Deploying application" \
            --parameters commands="[
              \"export DB_USERNAME=${{ secrets.DB_USERNAME }}\",
              \"export DB_PASSWORD=${{ secrets.DB_PASSWORD }}\",
              \"export DB_HOST=${{ secrets.DB_HOST }}\",
              \"export DB_NAME=${{ secrets.DB_NAME }}\",
              \"export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}\",
              \"export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}\",
              \"export AWS_REGION=${{ secrets.AWS_REGION }}\",
              \"export S3_BUCKET=${{ secrets.S3_BUCKET }}\",
              \"export API_KEY=${{ secrets.API_KEY }}\",
              \"export ADMIN_MAIL=${{ secrets.ADMIN_MAIL }}\",
              \"docker pull ${{ secrets.DOCKER_USERNAME }}/pokemon-shop:latest\",
              \"cd /home/ec2-user/\",
              \"if [ -d pokemon-shop ]; then cd pokemon-shop && git pull; else git clone -b main https://github.com/urkorenu/pokemon-shop.git && cd pokemon-shop; fi\",
              \"docker stop pokemon-shop-app-1 || true\",
              \"docker rm pokemon-shop-app-1 || true\",
              \"docker-compose pull\",
              \"docker-compose --env-file <(printenv) up app -d\",
              \"docker ps --filter name=pokemon-shop-app-1 --format '{{.Status}}'\"
            ]" \
            --output text
