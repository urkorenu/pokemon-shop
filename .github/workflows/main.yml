name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev

  pull_request:
    branches:
      - main
      - dev

jobs:
  lint:
    name: Lint and Format Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.12

      - name: Install Dependencies
        run: |
          pip install flake8 black

      - name: Run Black (Apply Formatting)
        run: |
          black .

      - name: Run Flake8 (Linting)
        run: |
          flake8 --exit-zero .

      - name: Commit and Push Changes
        if: success() && github.event_name == 'pull_request'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          
          # Define the branch name
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
      
          # Stash any unstaged changes to ensure a clean rebase
          git stash --include-untracked
      
          # Fetch and rebase the branch
          git fetch origin $BRANCH_NAME
          git rebase origin/$BRANCH_NAME
      
          # Reapply the stashed changes
          git stash pop || echo "No stashed changes to apply"
      
          # Add and commit changes
          git add .
          git commit -m "Apply black formatting via GitHub Actions" || echo "No changes to commit"
          
          # Push changes
          git push --force-with-lease origin HEAD:$BRANCH_NAME



  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
  
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
  
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
  
      - name: Build and Run Tests with Docker Compose
        run: |
          docker-compose up --build test



  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Docker Image
        env:
          COMMIT_HASH: ${{ github.sha }}
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/pokemon-shop"

          if [ "$BRANCH_NAME" == "main" ]; then
            TAG="latest"
          else
            TAG="dev"
          fi

          docker build -t $IMAGE_NAME:$COMMIT_HASH .
          docker tag $IMAGE_NAME:$COMMIT_HASH $IMAGE_NAME:$TAG

          docker push $IMAGE_NAME:$COMMIT_HASH
          docker push $IMAGE_NAME:$TAG

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/pokemon-shop:latest"
            docker pull $IMAGE_NAME
            docker stop pokemon-shop || true
            docker rm pokemon-shop || true
            docker run -d -p 5000:5000 --name pokemon-shop $IMAGE_NAME

