name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - dev*
  pull_request:
    branches:
      - main
      - dev*

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3
      # Set up Python environment
      - uses: actions/setup-python@v4
        with:
          python-version: 3.10.12
      # Install linting tools
      - run: pip install flake8 black
      # Run Black code formatter
      - run: black .
      # Run Flake8 linter
      - run: flake8 --exit-zero .
      # If successful and it's a pull request, apply Black formatting and push changes
      - if: success() && github.event_name == 'pull_request'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          git stash --include-untracked
          git fetch origin $BRANCH_NAME
          git rebase origin/$BRANCH_NAME
          git stash pop || echo "No stashed changes to apply"
          git add .
          git commit -m "Apply black formatting via GitHub Actions" || echo "No changes to commit"
          git push --force-with-lease origin HEAD:$BRANCH_NAME

  test:
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3
      # Configure AWS credentials
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: il-central-1
      # Launch an EC2 instance
      - id: launch-ec2
        run: |
          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ami-0d494ad1f8b4fb282 \
            --instance-type t3.micro \
            --key-name pokemon-app \
            --security-group-ids sg-00846fdd7be685d85 \
            --subnet-id subnet-0f8017850528bd48a \
            --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=Test-Agent}]' \
            --query 'Instances[0].InstanceId' \
            --output text)
          echo "INSTANCE_ID=${INSTANCE_ID}" >> $GITHUB_ENV
      # Wait for the EC2 instance to be running
      - run: aws ec2 wait instance-running --instance-ids ${{ env.INSTANCE_ID }}
      # Get the public IP of the EC2 instance
      - run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids ${{ env.INSTANCE_ID }} \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "PUBLIC_IP=${PUBLIC_IP}" >> $GITHUB_ENV
      # SSH into the EC2 instance and run tests
      - uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ env.PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            set -e
            sudo usermod -aG docker ec2-user
            newgrp docker
            mkdir -p /home/ec2-user/git
            cd /home/ec2-user/git
            if [ -d "pokemon-shop" ]; then
              rm -rf pokemon-shop
            fi
            BRANCH_NAME=${{ github.head_ref || github.ref_name }}
            git clone --branch $BRANCH_NAME https://github.com/urkorenu/pokemon-shop.git
            cd pokemon-shop
            
            # Create .env file
            cat <<EOF > .env
            DB_USERNAME=${{ secrets.DB_USERNAME }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_NAME=${{ secrets.DB_NAME }}
            AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            S3_BUCKET=${{ secrets.S3_BUCKET }}
            API_KEY=${{ secrets.API_KEY }}
            ADMIN_MAIL=${{ secrets.ADMIN_MAIL }}
            ELASTIC_CACHE=${{ secrets.ELASTIC_CACHE }}
            EOF

            # Build and run Docker Compose with the environment file
            docker-compose --env-file .env up --build test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3
      # Log in to Docker Hub
      - uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      # Build and push Docker images
      - env:
          COMMIT_HASH: ${{ github.sha }}
        run: |
          BRANCH_NAME=${{ github.ref_name }}
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/pokemon-shop"
          TAG=$([ "$BRANCH_NAME" == "main" ] && echo "latest" || echo "dev")
          docker build -t $IMAGE_NAME:$COMMIT_HASH .
          docker tag $IMAGE_NAME:$COMMIT_HASH $IMAGE_NAME:$TAG
          docker push $IMAGE_NAME:$COMMIT_HASH
          docker push $IMAGE_NAME:$TAG

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      # Configure AWS credentials
      - uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: il-central-1
      # Deploy the application using AWS SSM
      - run: |
          IMAGE_NAME="${{ secrets.DOCKER_USERNAME }}/pokemon-shop:latest"
          ASG_NAME="pokemon-shop-asg"
          echo "Starting rolling update for ASG: $ASG_NAME"
          INSTANCE_IDS=$(aws autoscaling describe-auto-scaling-groups \
            --auto-scaling-group-names $ASG_NAME \
            --query "AutoScalingGroups[0].Instances[*].InstanceId" \
            --output text)
          for INSTANCE_ID in $INSTANCE_IDS; do
            echo "Updating instance: $INSTANCE_ID"
            aws ssm send-command \
              --instance-ids $INSTANCE_ID \
              --document-name "AWS-RunShellScript" \
              --comment "Rolling update for Pokemon Shop" \
              --parameters commands="[
                \"export DB_USERNAME=${{ secrets.DB_USERNAME }}\",
                \"export DB_PASSWORD=${{ secrets.DB_PASSWORD }}\",
                \"export DB_HOST=${{ secrets.DB_HOST }}\",
                \"export DB_NAME=${{ secrets.DB_NAME }}\",
                \"export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}\",
                \"export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}\",
                \"export AWS_REGION=${{ secrets.AWS_REGION }}\",
                \"export S3_BUCKET=${{ secrets.S3_BUCKET }}\",
                \"export API_KEY=${{ secrets.API_KEY }}\",
                \"export ADMIN_MAIL=${{ secrets.ADMIN_MAIL }}\",
                \"export ELASTIC_CACHE=${{ secrets.ELASTIC_CACHE }}\",
                \"docker pull $IMAGE_NAME\",
                \"docker stop pokemon-shop-app-1 || true\",
                \"docker rm pokemon-shop-app-1 || true\",
                \"docker-compose pull\",
                \"docker-compose --env-file <(printenv) up app -d\"
              ]" \
              --output text
          done
