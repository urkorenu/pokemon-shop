name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint:
    name: Lint Python Files
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.10.12

      - name: Install Dependencies
        run: |
          pip install flake8 black

      - name: Run Black (Apply Formatting)
        run: |
          black .

      - name: Run Flake8 (Linting)
        run: |
          flake8 --exit-zero .

      - name: Commit and Push Changes
        if: success()
        # if: success() && github.event_name == 'pull_request'
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          git fetch origin $BRANCH_NAME
          git rebase origin/$BRANCH_NAME
          git add .
          git commit -m "Apply black formatting via GitHub Actions" || echo "No changes to commit"
          git push --force-with-lease origin HEAD:$BRANCH_NAME


  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
  
      - name: Set up Docker
        uses: docker/setup-buildx-action@v2
  
      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
  
      - name: Build and Run Tests with Docker Compose
        run: |
          docker-compose up --build test



  build:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push Docker Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/pokemon-shop:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/pokemon-shop:latest

  # deploy:
  #   name: Deploy to EC2
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3
  #     - name: Deploy to EC2
  #       uses: appleboy/ssh-action@v0.1.10
  #       with:
  #         host: ${{ secrets.EC2_HOST }}
  #         username: ${{ secrets.EC2_USER }}
  #         key: ${{ secrets.EC2_PRIVATE_KEY }}
  #         script: |
  #           docker pull ${{ secrets.DOCKER_USERNAME }}/pokemon-shop:latest
  #           docker stop pokemon-shop || true
  #           docker rm pokemon-shop || true
  #           docker run -d -p 5000:5000 --name pokemon-shop ${{ secrets.DOCKER_USERNAME }}/pokemon-shop:latest

